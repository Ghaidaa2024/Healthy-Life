# Generated by Django 5.1 on 2024-09-24 13:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BMIRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_At', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_At', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=30)),
                ('weight', models.FloatField()),
                ('weight_unit', models.CharField(max_length=10)),
                ('height', models.FloatField()),
                ('height_unit', models.CharField(max_length=10)),
                ('bmi', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_At', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_At', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=30, unique=True)),
                ('food_type', models.CharField(choices=[('1', 'carbohydrate'), ('2', 'protein'), ('3', 'fat'), ('4', 'fruits'), ('5', 'milk'), ('6', 'vegetables')], max_length=2)),
                ('amount', models.PositiveSmallIntegerField(default=0)),
                ('amout_type', models.PositiveSmallIntegerField(choices=[(1, 'Cup'), (2, 'Gram'), (3, 'Piece')], default=2)),
                ('calories', models.FloatField(default=0, max_length=30)),
                ('protein', models.FloatField(default=0, max_length=30)),
                ('fat', models.FloatField(default=0, max_length=30)),
                ('carbohydrate', models.FloatField(default=0, max_length=30)),
                ('calcium', models.FloatField(default=0, max_length=30)),
                ('cholesterol', models.FloatField(default=0, max_length=30)),
                ('iron', models.FloatField(default=0, max_length=30)),
                ('sodium', models.FloatField(default=0, max_length=30)),
                ('vitamin_C', models.FloatField(default=0, max_length=30)),
                ('vitamin_A', models.FloatField(default=0, max_length=30)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_At', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_At', models.DateTimeField(auto_now=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Calories',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_At', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_At', models.DateTimeField(auto_now=True, null=True)),
                ('weight', models.FloatField()),
                ('height', models.FloatField()),
                ('age', models.PositiveSmallIntegerField()),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'Man'), (2, 'Woman')])),
                ('plan', models.PositiveSmallIntegerField(choices=[(1, 'Weight Loss'), (2, 'Weight Gain'), (3, 'Weight Maintenance')], default=1)),
                ('pal', models.FloatField()),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
